//******************************************************************************
// 背景 [bg.cpp]
// Author : 管原　司
//******************************************************************************

//******************************************************************************
// インクルードファイル
//******************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "scene.h"
#include "scene2d.h"
#include "bg.h"

//******************************************************************************
// 静的メンバ変数
//******************************************************************************
LPDIRECT3DTEXTURE9 CBg::m_apTexture[MAX_BG] = {};
//******************************************************************************
// テクスチャ読み込み
//******************************************************************************
HRESULT CBg::Load(void)
{
	LPDIRECT3DDEVICE9 pDevice = CSceneManager::GetRenderer()->GetDevice();
	//テクスチャ読み込み
	D3DXCreateTextureFromFile(pDevice, "data/Texture/bg2.png", &m_apTexture[TYPE_FARST_BG]);
	D3DXCreateTextureFromFile(pDevice, "data/Texture/bg101.png", &m_apTexture[TYPE_SECOUND_BG]);
	D3DXCreateTextureFromFile(pDevice, "data/Texture/bg102.png", &m_apTexture[TYPE_THIRD_BG]);
	return S_OK;
}
//******************************************************************************
// テクスチャ破棄
//******************************************************************************
void CBg::Unload(void)
{
	for (int nCnt = 0; nCnt < MAX_BG; nCnt++)
	{
		// テクスチャの破棄
		if (m_apTexture[nCnt] != NULL)
		{
			m_apTexture[nCnt]->Release();
			m_apTexture[nCnt] = NULL;
		}
	}
}

//******************************************************************************
// コンストラクタ
//******************************************************************************
CBg::CBg(int nPriority) : CScene(nPriority)
{
	memset(m_apScene2D, 0, sizeof(m_apScene2D));
	m_type		= TYPE_NONE;
	m_pos		= D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_size		= D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_texsizeX	= 0.0f;
	m_texsizeY	= 0.0f;
	m_fFastMove = 0.0f;
	m_fSlowMove = 0.0f;
	m_fmove		= 0.0f;
}
//******************************************************************************
// デストラクタ
//******************************************************************************
CBg::~CBg()
{
}
//******************************************************************************
// 生成関数
//******************************************************************************
CBg * CBg::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	// ポインタ
	CBg * pBg;

	// メモリ確保
	pBg = new CBg;

	// 位置座標代入
	pBg->m_pos = pos;

	// サイズ代入
	pBg->m_size = size;

	// 初期化
	pBg->Init();

	// ポインタを返す
	return pBg;
}
//******************************************************************************
// 初期化関数
//******************************************************************************
HRESULT CBg::Init(void)
{
	// メモリ確保
	m_apScene2D[TYPE_FARST_BG] = new CScene2d;
	m_apScene2D[TYPE_SECOUND_BG] = new CScene2d;
	m_apScene2D[TYPE_THIRD_BG] = new CScene2d;

	// 位置座標設定
	m_apScene2D[TYPE_FARST_BG]->SetPosition(m_pos);
	m_apScene2D[TYPE_SECOUND_BG]->SetPosition(m_pos);
	m_apScene2D[TYPE_THIRD_BG]->SetPosition(m_pos);

	// 位置座標設定
	m_apScene2D[TYPE_FARST_BG]->SetSize(m_size);
	m_apScene2D[TYPE_SECOUND_BG]->SetSize(m_size);
	m_apScene2D[TYPE_THIRD_BG]->SetSize(m_size);

	// カラー設定
	m_apScene2D[TYPE_FARST_BG]->SetRGBA(D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f));
	m_apScene2D[TYPE_SECOUND_BG]->SetRGBA(D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f));
	m_apScene2D[TYPE_THIRD_BG]->SetRGBA(D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f));

	// テクスチャの受け渡し
	m_apScene2D[TYPE_FARST_BG]->BindTexture(m_apTexture[TYPE_FARST_BG]);
	m_apScene2D[TYPE_SECOUND_BG]->BindTexture(m_apTexture[TYPE_SECOUND_BG]);
	m_apScene2D[TYPE_THIRD_BG]->BindTexture(m_apTexture[TYPE_THIRD_BG]);

	// オブジェクトタイプの設定
	m_apScene2D[TYPE_FARST_BG]->SetObjType(CScene::OBJTYPE_BG);
	m_apScene2D[TYPE_SECOUND_BG]->SetObjType(CScene::OBJTYPE_BG);
	m_apScene2D[TYPE_THIRD_BG]->SetObjType(CScene::OBJTYPE_BG);

	// 初期化
	m_apScene2D[TYPE_FARST_BG]->Init();
	m_apScene2D[TYPE_SECOUND_BG]->Init();
	m_apScene2D[TYPE_THIRD_BG]->Init();

	return S_OK;
}
//******************************************************************************
// 終了関数
//******************************************************************************
void CBg::Uninit(void)
{
	//終了
	Release();
}
//******************************************************************************
// 更新関数
//******************************************************************************
void CBg::Update(void)
{
	// 更新
	m_apScene2D[TYPE_FARST_BG]->Update();
	m_apScene2D[TYPE_SECOUND_BG]->Update();
	m_apScene2D[TYPE_THIRD_BG]->Update();

	// 普通
	m_fmove += 0.005f;

	// 遅い
	m_fSlowMove += 0.0005f;

	// テクスチャ移動
	if (m_fFastMove >= 1.0f)
	{
		m_fFastMove = 0.0f;
	}
	// テクスチャ移動
	if (m_fmove >= 1.0f)
	{
		m_fmove = 0.0f;
	}
	// テクスチャ移動
	if (m_fSlowMove >= 1.0f)
	{
		m_fSlowMove = 0.0f;
	}

	// テクスチャ更新
	m_apScene2D[TYPE_FARST_BG]->SetTexture(m_texsizeX, m_texsizeY + +m_fFastMove, 1.0f , 1.0f);
	m_apScene2D[TYPE_SECOUND_BG]->SetTexture(m_texsizeX, m_texsizeY + +m_fmove, 1.0f , 1.0f);
	m_apScene2D[TYPE_THIRD_BG]->SetTexture(m_texsizeX, m_texsizeY + +m_fSlowMove, 1.0f , 1.0f);

}
//******************************************************************************
// 描画関数
//******************************************************************************
void CBg::Draw(void)
{
}
